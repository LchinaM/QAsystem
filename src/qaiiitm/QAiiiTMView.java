/*
 * QAiiiTMView.java
 */

package qaiiitm;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.lang.Object;
import info.ephyra.*;
import info.ephyra.querygeneration.Query;
import info.ephyra.questionanalysis.AnalyzedQuestion;
import info.ephyra.questionanalysis.QuestionInterpretation;
import info.ephyra.search.Result;
import java.io.File;
import speechOn.Microphone;
import javax.sound.sampled.AudioFileFormat.Type;
import speechOn.GoogleResponse;
import speechOn.Recognizer;

/**
 * The application's main frame.
 */
public class QAiiiTMView extends FrameView {
    String currentRootDirectoryPath;
    Microphone mic = new Microphone(Type.WAVE);
    public QAiiiTMView(SingleFrameApplication app) {
        super(app);
        File currentJavaJarFile = new File(QAiiiTMView.class.getProtectionDomain().getCodeSource().getLocation().getPath());
        String currentJavaJarFilePath = currentJavaJarFile.getAbsolutePath();
        currentRootDirectoryPath = currentJavaJarFilePath.replace(currentJavaJarFile.getName(), "");


        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = QAiiiTMApp.getApplication().getMainFrame();
            aboutBox = new QAiiiTMAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        QAiiiTMApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        newsTextBox = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        answertypeTextBox = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        interpretationsTextBox = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        questionTextBox = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        queryStringTextBox = new javax.swing.JTextArea();
        solveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        answerTypeTextBox = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        answerPatternTextBox = new javax.swing.JTextArea();
        speakStop = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        newsTextBox.setColumns(20);
        newsTextBox.setLineWrap(true);
        newsTextBox.setRows(5);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(qaiiitm.QAiiiTMApp.class).getContext().getResourceMap(QAiiiTMView.class);
        newsTextBox.setText(resourceMap.getString("newsTextBox.text")); // NOI18N
        newsTextBox.setName("newsTextBox"); // NOI18N
        jScrollPane1.setViewportView(newsTextBox);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        answertypeTextBox.setColumns(20);
        answertypeTextBox.setLineWrap(true);
        answertypeTextBox.setRows(5);
        answertypeTextBox.setText(resourceMap.getString("answertypeTextBox.text")); // NOI18N
        answertypeTextBox.setName("answertypeTextBox"); // NOI18N
        jScrollPane2.setViewportView(answertypeTextBox);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        interpretationsTextBox.setColumns(20);
        interpretationsTextBox.setLineWrap(true);
        interpretationsTextBox.setRows(5);
        interpretationsTextBox.setText(resourceMap.getString("interpretationsTextBox.text")); // NOI18N
        interpretationsTextBox.setName("interpretationsTextBox"); // NOI18N
        jScrollPane3.setViewportView(interpretationsTextBox);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        questionTextBox.setColumns(20);
        questionTextBox.setLineWrap(true);
        questionTextBox.setRows(5);
        questionTextBox.setText(resourceMap.getString("questionTextBox.text")); // NOI18N
        questionTextBox.setName("questionTextBox"); // NOI18N
        jScrollPane4.setViewportView(questionTextBox);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        queryStringTextBox.setColumns(20);
        queryStringTextBox.setLineWrap(true);
        queryStringTextBox.setRows(5);
        queryStringTextBox.setText(resourceMap.getString("queryStringTextBox.text")); // NOI18N
        queryStringTextBox.setName("queryStringTextBox"); // NOI18N
        jScrollPane5.setViewportView(queryStringTextBox);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(qaiiitm.QAiiiTMApp.class).getContext().getActionMap(QAiiiTMView.class, this);
        solveButton.setAction(actionMap.get("solveQuestion")); // NOI18N
        solveButton.setText(resourceMap.getString("solveButton.text")); // NOI18N
        solveButton.setName("solveButton"); // NOI18N

        loadButton.setAction(actionMap.get("loadAll")); // NOI18N
        loadButton.setText(resourceMap.getString("loadButton.text")); // NOI18N
        loadButton.setName("loadButton"); // NOI18N

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        answerTypeTextBox.setColumns(20);
        answerTypeTextBox.setLineWrap(true);
        answerTypeTextBox.setRows(5);
        answerTypeTextBox.setText(resourceMap.getString("answerTypeTextBox.text")); // NOI18N
        answerTypeTextBox.setName("answerTypeTextBox"); // NOI18N
        jScrollPane6.setViewportView(answerTypeTextBox);

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        answerPatternTextBox.setColumns(20);
        answerPatternTextBox.setLineWrap(true);
        answerPatternTextBox.setRows(5);
        answerPatternTextBox.setText(resourceMap.getString("answerPatternTextBox.text")); // NOI18N
        answerPatternTextBox.setName("answerPatternTextBox"); // NOI18N
        jScrollPane7.setViewportView(answerPatternTextBox);

        speakStop.setAction(actionMap.get("netSpeech")); // NOI18N
        speakStop.setText(resourceMap.getString("speakStop.text")); // NOI18N
        speakStop.setName("speakStop"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(speakStop, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)))
                .addGap(367, 367, 367))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speakStop, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addGap(109, 109, 109))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1021, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 851, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents
    OpenEphyra OE = null;

    @Action
    public void loadAll() {

        //OE = new OpenEphyra(currentRootDirectoryPath);
        OE = new OpenEphyra("");
        speakStop.setEnabled(true);
        solveButton.setEnabled(true);
        loadButton.setEnabled(false);
    }

    @Action
    public void solveQuestion() {
        AnalyzedQuestion aq = OE.analyzer(questionTextBox.getText());
        String[] answerTypes = aq.getAnswerTypes();
        String pr = "";
        for(int i=0;i<answerTypes.length;i++)
        {
            pr+=answerTypes[i]+"\n";
        }
        answertypeTextBox.setText(pr);
        QuestionInterpretation[] interpret = aq.getInterpretations();
        pr = "";
        for(int i=0;i<interpret.length;i++)
        {
            pr+=interpret[i].toString()+"\n";
        }
        interpretationsTextBox.setText(pr);

        Query[] queries = OE.queryStrings(aq);
        pr = "";
        for(int i=0;i<queries.length;i++)
        {
            pr+=queries[i].getQueryString()+"\n";
        }
        queryStringTextBox.setText(pr);
        answertypeTextBox.setText(OE.questionAnalyse(newsTextBox.getText(), questionTextBox.getText()));
        Result[] rs = OE.answerType(newsTextBox.getText(), questionTextBox.getText());
        pr="";
        for(int i=queries.length;i<rs.length;i++)
        {
            pr+=rs[i].getAnswer()+"\n";
        }
        answerTypeTextBox.setText(pr);
        rs = OE.answerPattern(newsTextBox.getText(), questionTextBox.getText());
        pr="";
        for(int i=queries.length;i<rs.length;i++)
        {
            pr+=rs[i].getAnswer()+"\n";
        }
        answerPatternTextBox.setText(pr);
    }
    public static int micOnOff = 0;
    @Action
    public void netSpeech() {
        micOnOff++;
        speakStop.setText("Speak");
        if(micOnOff%2==1)
        {
                speakStop.setText("Stop");
                try
                {
                    mic.captureAudioToFile("abc.wav");
                }
                catch(Exception e)
                {
                        e.printStackTrace();
                }
        }
        else
        {
                speakStop.setText("Speak");
                try
                {
                    mic.close();
                    Thread.sleep(500);
                    Recognizer recog = new Recognizer();
                    GoogleResponse gr = recog.getRecognizedDataForWave("abc.wav");
                    //System.out.println(gr.getResponse());
                    newsTextBox.setText(gr.getResponse());
                }
                catch(Exception e)
                {
                        e.printStackTrace();
                }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea answerPatternTextBox;
    private javax.swing.JTextArea answerTypeTextBox;
    private javax.swing.JTextArea answertypeTextBox;
    private javax.swing.JTextArea interpretationsTextBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton loadButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea newsTextBox;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextArea queryStringTextBox;
    private javax.swing.JTextArea questionTextBox;
    private javax.swing.JButton solveButton;
    private javax.swing.JButton speakStop;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
